## 프로그래밍의 의미와 편리한 활용성

프로그래밍의 의미

프로그래밍은 컴퓨터를 제어하여 다양한 작업을 수행하는 과정을 말함.

컴퓨터는 복잡한 연산 능력을 가진 계산기이며, 우리는 이를 사용하여 영상 시청, 게임 플레이, 인터넷 사용 등을 한다.

프로그래밍의 필요성

다양한 작업을 수행하기 위해서는 컴퓨터에 명령을 내려야 함.

이를 위해 프로그래밍이 필요하며, 어플리케이션 및 앱을 통해 사용함.

프로그래밍 언어 기반

JAVA라는 언어를 기반으로 하고 컴퓨터 프로그래밍의 다양한 언어 중 하나로 포트란, C언어, C++ 등과 함께 사용된다. 

---

## 프로세싱이란

Ben Fry와 Casey Reas가 2001년에 처음 공개한 오픈소스 프로그래밍 언어이다.

기본적으로 Java 베이스의 언어를 사용한다.

프로세싱에서 Java의 모든 명령어 사용 가능하다.

디자이너 또는 비주얼 아티스트를 위해 소프트웨어 (비주얼프로그래밍랭귀지)

명령어들이 화면 상에 그리는 것에 초점을 두었다.

---

## 프로세싱과 다른 프로그래밍 환경

프로그래밍 환경 변경

프로세싱에서 프레임워크로 전환 → 성능 향상 가능

프로젝트 결과물 최적화

다양한 프로그래밍 환경

오픈프레임워크와 비슷한 기능의 머신, 터치 디자이너 등의 소프트웨어 존재

주로 시각적인 요소, 비주얼 프로그래밍 방식 채택

비주얼 프로그래밍 언어

비주얼 프로그래밍 언어란? : 블록을 조합하여 코딩하는 방식

과거: 스트레치나 엔트리 등 유명

현재: 맥스, MSP, 퓨어 데이터 등 유명

---

## 리눅스 및 오픈 소스 소프트웨어

OS의 다양성

맥 OS, 윈도우, 리눅스 등이 대표적인 OS로, 리눅스는 주로 오픈 소스로 개발되는 운영 체제이다.

오픈 소스의 특징

오픈 소스는 코드를 공개하여 다른 사람들이 이를 활용하고 발전시킬 수 있는 구조를 가진다.

이러한 개방적인 방식은 소프트웨어 개발과 공유에 유익하며, 다양한 라이브러리를 무료로 이용할 수 있다.

프로세싱과 라이브러리

프로세싱은 다양한 라이브러리를 활용하여 기능을 확장할 수 있으며, 대부분의 필요한 기능은 이미 라이브러리로 제공된다

---

## 프로세싱 사용 전 기본 사항

프로세싱 설치 경로

프로세싱 설치 후 프로그램 폴더에 해당 애플리케이션을 실행한다.

실행 후 웰컴 창이 표시되는데, 불필요한 창을 체크 해제하여 닫는다.

프로세싱 폴더가 자동으로 생성되며, 여기에 코드를 저장하고 관리한다.

프로세싱의 기본 기능

프로세싱은 디자이너와 아티스트를 위한 소프트웨어로, 화면에 그림을 그리는 것에 초점을 맞추었다.

화면에 점, 선, 원, 다각형 등을 그리기 위해 사용하는 명령어들이 주를 이룬다.

이를 위해 좌표 체계가 필요하며, 일반적으로 수학의 그래프에서 사용되는 좌표 체계를 기반으로 한다.

수학적 좌표 체계

일반적으로 수학의 그래프에서는 x 축과 y 축으로 구성된 좌표 체계를 사용한다.

x 축은 오른쪽으로 갈수록 숫자가 커지고, 왼쪽으로 갈수록 숫자가 작아진다.

y 축은 위로 갈수록 숫자가 커지고, 아래로 갈수록 숫자가 작아진다.

중심점은 (0, 0)이며, 아래쪽과 왼쪽은 음수, 위쪽과 오른쪽은 양수이다.

---

## 코딩 글꼴 선택

코딩에는 고정폭 글꼴 적합

나눔 고딕 코딩 글꼴 추천: 한글이 제대로 표시

글꼴 설정 방법

1. 나눔 고딕 코딩 글꼴 다운로드
2. 프로세싱 종료 → 다시 실행
3. 설정 창 → 나눔고딕 코딩 글꼴 선택

코딩 글꼴의 장점

숫자 0과 영문 대문자 O를 구분 간단

숫자 0은 사선으로 표시

---

## 컴퓨터 그림 그리기,프로그래밍

1. 종이 준비 → 컴퓨터 그림 그릴 때 하나의 요소
2. 화면 크기 결정
    1. `size` 명령어 사용, 화면 크기 설정
        1. 사이즈 명령어 형식: `size(x, y);`
3. 명령어의 끝맺음: `;`, 괄호 안: 매개변수
4. 함수: 컴퓨터에게 명령, 사이즈 명령어: 화면 크기를 설정하는 명령

---

## 프로그래밍 언어의 학습과 레퍼런스

1. 명령어마다 필요한 매개변수 개수 다양
    1. 레퍼런스(사전) 참조
2. 프로세싱 사이트 레퍼런스: 사용 가능한 명령어 제시
3. 레퍼런스를 통해 필요한 명령어, 사용법 학습

---

## 포인트,라인,면 그리기

1. **점 찍기**: **`point()`** 명령어 사용 → 좌표값을 지정
2. **선 그리기**: **`line()`** 명령어 사용 → 두 점 연결, 직선 그리기
3. **면 그리기**: 다양한 도형, 보통 사각형 또는 다각형 모양

---

## 픽셀위치에 네모 그리기

1. **네모 그리기**: **`rect()`** 명령어 사용→ 좌표, 너비, 높이 지정
    - 매개변수: x좌표, y좌표, 너비, 높이
        - 예시: **`rect(200, 100, 250, 250)`**

---

## 프로세싱 2D 기본 도형 그리기

1. 기본 도형 명령어
    - point: 점
    - rect: 직사각형
    - arc: 호
    - circle: 원
    - ellipse: 타원
    - quad: 사각형
    - square: 정사각형
    - triangle: 삼각형
    - polygon: 다각형
2. 명령어 사용법
    - 다양한 매개변수 필요
    - ellipse: 중심점, 너비, 높이 지정
3. 실행 순서
    - 위에서 아래로 순차적 실행
    - 창을 만들고, 점을 찍고, 선과 도형 그리기
    - 겹치는 도형: 순서 조절 후 처리

---

## 색상 지정

1. 색상 지정
    - 숫자 하나만 입력하여 색상 지정
    - `stroke`명령어: 외곽선 색상 변경
2. 색상 변경
    - 그림을 그리기 전 색상 선택
3. 색상 값 범위
    - 0~255 사이 숫자 입력, 색상 지정
    - 이는 컴퓨터가 색상을 8비트 단위로 계산하기 때문임.
4. 색상 값 이해
    - 0~255 숫자는 이진수로 표현
    - 비트 조합, 다양한 색 표현
5. 컴퓨터 색상 처리 방식
    - 8비트 단위로 계산
    - 0~255 사이 숫자로 색상 지정
6. 색상 값 의미
    - 0은 검정색, 255는 흰색
    - 중간 값: 회색
7. 빛의 삼원색
    - 빨간색, 녹색, 파란색 값을 조합하여 원하는 색상을 만듦.
    - 각 색상에 대해 0에서 255 사이의 숫자로 밝기 값을 입력함.
8. 색상 선택의 불편함:
    - 숫자로 색상을 지정하는 것은 어려울 수 있음.
    - 색상 선택 도구를 사용하여 직관적으로 색상을 선택할 수 있음.
    - 선택한 색상의 RGB 값을 숫자로 입력하여 사용 가능함.

---

## 색상 변경 방법

- 외곽선 색상 변경
    - **`stroke()`** 명령어 사용
    - 하나의 매개 변수: 그레이 스케일 색상, 세 개의 매개 변수: RGB 색상 지정
- 내부 면의 색상 변경
    - **`fill()`** 명령어 사용
    - 하나의 매개 변수: 그레이 스케일 색상, 세 개의 매개 변수: RGB 색상 지정
- 색상 선택 방법
    - 색상 선택 창 통해 색상 선택
    - 선택한 색상의 RGB 값을 **`stroke()`** 또는 **`fill()`** 명령어에 입력

---

## 색상과 투명도 설정 방법

- 선 색상, 투명도 설정
    - **`stroke()`** 명령어: 선 색상, 투명도 지정
    - **`noStroke()`** 명령어: 외곽선 삭제 가능
- 면 색상, 투명도 설정
    - **`fill()`** 명령어: 면 색상, 투명도 지정
    - **`noFill()`** 명령어: 면 삭제 가능

---

## 프로세싱 프로그래밍 기본 구조

1. **`setup()`** 함수: 프로그램 초기 설정 및 준비 단계 처리 함수
    - 프로그램 실행 시 한 번만 실행
    - 화면 크기 설정 등 초기화 작업 수행
2. **`draw()`** 함수: 그림 그리기 및 반복 작업 처리 함수
    - 프로그램 실행 후 계속 반복 실행
    - 주로 그림 그리기, 반복 작업 등 수행
3. 프로그램 실행 흐름
    - **`setup()`** 함수: 프로그램 시작 시 한 번 실행, 초기화 작업 수행
    - **`draw()`** 함수: 프로그램 실행되는 동안 반복 실행, 그림 그리기 & 반복 작업 처리
4. 반복 작업
    - 그림을 그리거나 반복 작업 처리: **`draw()`** 함수 내부에 코드 작성
    - 필요한 경우 반복 작업을 처리하는 코드를 중괄호로 묶어 구분
